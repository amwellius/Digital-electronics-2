
08-i2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800160  00800160  00000504  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e17  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000915  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bf  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000556  00000000  00000000  00002b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003087  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_18>
  4c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3a       	cpi	r26, 0xA5	; 165
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 02 01 	call	0x204	; 0x204 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 94 01 	call	0x328	; 0x328 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <__vector_13+0x28>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    uint8_t data;  
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	e1 f0       	breq	.+56     	; 0x14c <__vector_13+0x74>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	09 f4       	brne	.+2      	; 0x11a <__vector_13+0x42>
 118:	40 c0       	rjmp	.+128    	; 0x19a <__vector_13+0xc2>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_13+0x48>
 11e:	56 c0       	rjmp	.+172    	; 0x1cc <__vector_13+0xf4>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	98 0f       	add	r25, r24
 128:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
        
        
        
        
        // If slave address is between 8 and 119 then move to SEND state
        if (addr>8 && addr<119) state = STATE_SEND;
 12c:	88 50       	subi	r24, 0x08	; 8
 12e:	8e 36       	cpi	r24, 0x6E	; 110
 130:	18 f4       	brcc	.+6      	; 0x138 <__vector_13+0x60>
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        if (addr >= 120) {
 138:	98 37       	cpi	r25, 0x78	; 120
 13a:	08 f4       	brcc	.+2      	; 0x13e <__vector_13+0x66>
 13c:	4e c0       	rjmp	.+156    	; 0x1da <__vector_13+0x102>
            addr=0;
 13e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
            uart_puts("\r\n***Scan completed***\r\n");
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
 14a:	47 c0       	rjmp	.+142    	; 0x1da <__vector_13+0x102>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 150:	88 0f       	add	r24, r24
 152:	0e 94 11 01 	call	0x222	; 0x222 <twi_start>
        
        
     //twi_stop();
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
        if (result == 1) {
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	19 f4       	brne	.+6      	; 0x160 <__vector_13+0x88>
            state = STATE_IDLE;
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <state.1964>
        }            
        
        //je tam aktivne
        if (result == 0) {
 160:	81 11       	cpse	r24, r1
 162:	18 c0       	rjmp	.+48     	; 0x194 <__vector_13+0xbc>
            data = twi_read_ack();
 164:	0e 94 2e 01 	call	0x25c	; 0x25c <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 168:	4a e0       	ldi	r20, 0x0A	; 10
 16a:	be 01       	movw	r22, r28
 16c:	6f 5f       	subi	r22, 0xFF	; 255
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__itoa_ncheck>
            
            itoa(data, uart_string, 10);
            uart_puts("data: ");
 176:	89 e3       	ldi	r24, 0x39	; 57
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
            uart_puts(uart_string);
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
            uart_puts("\r\n");
 186:	86 e3       	ldi	r24, 0x36	; 54
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
            
            state = STATE_ACK;
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        }            

        twi_stop();
 194:	0e 94 38 01 	call	0x270	; 0x270 <twi_stop>
        
        break;
 198:	20 c0       	rjmp	.+64     	; 0x1da <__vector_13+0x102>

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
        itoa(addr, uart_string, 10);
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19e:	4a e0       	ldi	r20, 0x0A	; 10
 1a0:	be 01       	movw	r22, r28
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__itoa_ncheck>
        uart_puts("adress: ");
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
        uart_puts(uart_string);
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
        uart_puts("\r\n");
 1bc:	86 e3       	ldi	r24, 0x36	; 54
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
        itoa(twi_read_ack(),uart_string,10);
        uart_puts(uart_string);
        uart_puts("\r\n");        
        */
        
        state = STATE_IDLE;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>

        break;
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <__vector_13+0x102>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        uart_puts("Something went wrong!");
 1d2:	89 e4       	ldi	r24, 0x49	; 73
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 c4 01 	call	0x388	; 0x388 <uart_puts>
        break;
    }
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 204:	87 b1       	in	r24, 0x07	; 7
 206:	8f 7c       	andi	r24, 0xCF	; 207
 208:	87 b9       	out	0x07, r24	; 7
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	80 63       	ori	r24, 0x30	; 48
 20e:	88 b9       	out	0x08, r24	; 8
 210:	e9 eb       	ldi	r30, 0xB9	; 185
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8c 7f       	andi	r24, 0xFC	; 252
 218:	80 83       	st	Z, r24
 21a:	88 e9       	ldi	r24, 0x98	; 152
 21c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 220:	08 95       	ret

00000222 <twi_start>:
 222:	94 ea       	ldi	r25, 0xA4	; 164
 224:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 228:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22c:	99 23       	and	r25, r25
 22e:	e4 f7       	brge	.-8      	; 0x228 <twi_start+0x6>
 230:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 234:	84 e8       	ldi	r24, 0x84	; 132
 236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23e:	88 23       	and	r24, r24
 240:	e4 f7       	brge	.-8      	; 0x23a <twi_start+0x18>
 242:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 246:	88 7f       	andi	r24, 0xF8	; 248
 248:	88 31       	cpi	r24, 0x18	; 24
 24a:	21 f0       	breq	.+8      	; 0x254 <twi_start+0x32>
 24c:	80 34       	cpi	r24, 0x40	; 64
 24e:	21 f4       	brne	.+8      	; 0x258 <twi_start+0x36>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	08 95       	ret

0000025c <twi_read_ack>:
 25c:	84 ec       	ldi	r24, 0xC4	; 196
 25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 266:	88 23       	and	r24, r24
 268:	e4 f7       	brge	.-8      	; 0x262 <twi_read_ack+0x6>
 26a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 26e:	08 95       	ret

00000270 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 270:	84 e9       	ldi	r24, 0x94	; 148
 272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 276:	08 95       	ret

00000278 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
 28c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 290:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 294:	8c 71       	andi	r24, 0x1C	; 28
 296:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <UART_RxHead>
 29a:	ef 5f       	subi	r30, 0xFF	; 255
 29c:	ef 71       	andi	r30, 0x1F	; 31
 29e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <UART_RxTail>
 2a2:	e9 17       	cp	r30, r25
 2a4:	39 f0       	breq	.+14     	; 0x2b4 <__vector_18+0x3c>
 2a6:	e0 93 62 01 	sts	0x0162, r30	; 0x800162 <UART_RxHead>
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	eb 59       	subi	r30, 0x9B	; 155
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	20 83       	st	Z, r18
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <__vector_18+0x3e>
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <__data_end>
 2ba:	89 2b       	or	r24, r25
 2bc:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <__vector_19>:
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
 2e6:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <UART_TxHead>
 2ea:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <UART_TxTail>
 2ee:	98 17       	cp	r25, r24
 2f0:	69 f0       	breq	.+26     	; 0x30c <__vector_19+0x38>
 2f2:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <UART_TxTail>
 2f6:	ef 5f       	subi	r30, 0xFF	; 255
 2f8:	ef 71       	andi	r30, 0x1F	; 31
 2fa:	e0 93 63 01 	sts	0x0163, r30	; 0x800163 <UART_TxTail>
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	eb 57       	subi	r30, 0x7B	; 123
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	80 81       	ld	r24, Z
 306:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 30a:	05 c0       	rjmp	.+10     	; 0x316 <__vector_19+0x42>
 30c:	e1 ec       	ldi	r30, 0xC1	; 193
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	8f 7d       	andi	r24, 0xDF	; 223
 314:	80 83       	st	Z, r24
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <uart_init>:
 328:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <UART_TxHead>
 32c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <UART_TxTail>
 330:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <UART_RxHead>
 334:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <UART_RxTail>
 338:	28 2f       	mov	r18, r24
 33a:	39 2f       	mov	r19, r25
 33c:	33 23       	and	r19, r19
 33e:	1c f4       	brge	.+6      	; 0x346 <uart_init+0x1e>
 340:	22 e0       	ldi	r18, 0x02	; 2
 342:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 346:	90 78       	andi	r25, 0x80	; 128
 348:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 34c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 350:	88 e9       	ldi	r24, 0x98	; 152
 352:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 35c:	08 95       	ret

0000035e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 35e:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <UART_TxHead>
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 366:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UART_TxTail>
 36a:	29 17       	cp	r18, r25
 36c:	e1 f3       	breq	.-8      	; 0x366 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 36e:	e2 2f       	mov	r30, r18
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	eb 57       	subi	r30, 0x7B	; 123
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 378:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 37c:	e1 ec       	ldi	r30, 0xC1	; 193
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	80 62       	ori	r24, 0x20	; 32
 384:	80 83       	st	Z, r24
 386:	08 95       	ret

00000388 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
    while (*s)
 38e:	03 c0       	rjmp	.+6      	; 0x396 <uart_puts+0xe>
        uart_putc(*s++);
 390:	21 96       	adiw	r28, 0x01	; 1
 392:	0e 94 af 01 	call	0x35e	; 0x35e <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 396:	88 81       	ld	r24, Y
 398:	81 11       	cpse	r24, r1
 39a:	fa cf       	rjmp	.-12     	; 0x390 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <__itoa_ncheck>:
 3a2:	bb 27       	eor	r27, r27
 3a4:	4a 30       	cpi	r20, 0x0A	; 10
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <__itoa_ncheck+0x12>
 3a8:	99 23       	and	r25, r25
 3aa:	22 f4       	brpl	.+8      	; 0x3b4 <__itoa_ncheck+0x12>
 3ac:	bd e2       	ldi	r27, 0x2D	; 45
 3ae:	90 95       	com	r25
 3b0:	81 95       	neg	r24
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__utoa_common>

000003b8 <__utoa_ncheck>:
 3b8:	bb 27       	eor	r27, r27

000003ba <__utoa_common>:
 3ba:	fb 01       	movw	r30, r22
 3bc:	55 27       	eor	r21, r21
 3be:	aa 27       	eor	r26, r26
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	aa 1f       	adc	r26, r26
 3c6:	a4 17       	cp	r26, r20
 3c8:	10 f0       	brcs	.+4      	; 0x3ce <__utoa_common+0x14>
 3ca:	a4 1b       	sub	r26, r20
 3cc:	83 95       	inc	r24
 3ce:	50 51       	subi	r21, 0x10	; 16
 3d0:	b9 f7       	brne	.-18     	; 0x3c0 <__utoa_common+0x6>
 3d2:	a0 5d       	subi	r26, 0xD0	; 208
 3d4:	aa 33       	cpi	r26, 0x3A	; 58
 3d6:	08 f0       	brcs	.+2      	; 0x3da <__utoa_common+0x20>
 3d8:	a9 5d       	subi	r26, 0xD9	; 217
 3da:	a1 93       	st	Z+, r26
 3dc:	00 97       	sbiw	r24, 0x00	; 0
 3de:	79 f7       	brne	.-34     	; 0x3be <__utoa_common+0x4>
 3e0:	b1 11       	cpse	r27, r1
 3e2:	b1 93       	st	Z+, r27
 3e4:	11 92       	st	Z+, r1
 3e6:	cb 01       	movw	r24, r22
 3e8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <strrev>

000003ec <strrev>:
 3ec:	dc 01       	movw	r26, r24
 3ee:	fc 01       	movw	r30, r24
 3f0:	67 2f       	mov	r22, r23
 3f2:	71 91       	ld	r23, Z+
 3f4:	77 23       	and	r23, r23
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <strrev+0x4>
 3f8:	32 97       	sbiw	r30, 0x02	; 2
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fc:	7c 91       	ld	r23, X
 3fe:	6d 93       	st	X+, r22
 400:	70 83       	st	Z, r23
 402:	62 91       	ld	r22, -Z
 404:	ae 17       	cp	r26, r30
 406:	bf 07       	cpc	r27, r31
 408:	c8 f3       	brcs	.-14     	; 0x3fc <strrev+0x10>
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
