
06-lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004cc  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800108  00800108  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122d  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096c  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000885  00000000  00000000  00002221  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000512  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000867  00000000  00000000  00003162  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000039c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
 1a2:	61 11       	cpse	r22, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_gotoxy+0xc>
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1ac:	08 95       	ret
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret

000001b6 <lcd_clrscr>:
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_putc>:
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_puts+0xe>
 1ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
 1d2:	fe 01       	movw	r30, r28
 1d4:	ef 01       	movw	r28, r30
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <lcd_puts+0x8>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x32>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x38>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	80 62       	ori	r24, 0x20	; 32
 222:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	80 61       	ori	r24, 0x10	; 16
 228:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x54>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x5e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init+0x64>
 248:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x6e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x74>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7e       	andi	r24, 0xEF	; 239
 25e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x84>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x8a>
 26e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <main>:


int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
    lcd_putc('!');
    
    lcd_gotoxy(1, 0);
    lcd_puts("CZ UB Czechia !");
*/
    lcd_gotoxy(1, 0);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    lcd_puts("0 :");
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt
        TIM2_overflow_16ms();
 2a6:	e1 eb       	ldi	r30, 0xB1	; 177
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	87 60       	ori	r24, 0x07	; 7
 2ae:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();
 2b0:	e0 e7       	ldi	r30, 0x70	; 112
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 2ba:	78 94       	sei
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <main+0x2c>

000002be <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	28 97       	sbiw	r28, 0x08	; 8
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	cd bf       	out	0x3d, r28	; 61
    static uint8_t tens = 0;        // Tenths of a second
    static uint8_t secs = 0;        // Seconds
    static uint8_t seconds = 0;
    static uint8_t minutes = 0;
    //char lcd_string[2] = "  ";      // String for converting numbers by itoa()
    char lcd_string_tens[2] = "  ";
 2ee:	80 e2       	ldi	r24, 0x20	; 32
 2f0:	90 e2       	ldi	r25, 0x20	; 32
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	89 83       	std	Y+1, r24	; 0x01
    char lcd_string_secs[3] = "  ";
 2f6:	9c 83       	std	Y+4, r25	; 0x04
 2f8:	8b 83       	std	Y+3, r24	; 0x03
 2fa:	1d 82       	std	Y+5, r1	; 0x05
    char lcd_string_mins[3] = "  ";
 2fc:	9f 83       	std	Y+7, r25	; 0x07
 2fe:	8e 83       	std	Y+6, r24	; 0x06
 300:	18 86       	std	Y+8, r1	; 0x08

    number_of_overflows++;
 302:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <number_of_overflows.1948>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <number_of_overflows.1948>
    if (number_of_overflows >= 6)
 30c:	86 30       	cpi	r24, 0x06	; 6
 30e:	08 f4       	brcc	.+2      	; 0x312 <__vector_9+0x54>
 310:	8d c0       	rjmp	.+282    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 312:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <number_of_overflows.1948>
        //TENS
        tens++;
 316:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tens.1949>
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tens.1949>
        if (tens == 9) {
 320:	89 30       	cpi	r24, 0x09	; 9
 322:	11 f4       	brne	.+4      	; 0x328 <__vector_9+0x6a>
            tens=0;
 324:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tens.1949>
        }          
        //SECS/MINS
        secs++;
 328:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <secs.1950>
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <secs.1950>
        if (secs==10){
 332:	8a 30       	cpi	r24, 0x0A	; 10
 334:	39 f4       	brne	.+14     	; 0x344 <__vector_9+0x86>
            seconds++;
 336:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seconds.1951>
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seconds.1951>
            secs=0;
 340:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <secs.1950>
        }
        if (seconds == 60) {
 344:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seconds.1951>
 348:	8c 33       	cpi	r24, 0x3C	; 60
 34a:	59 f4       	brne	.+22     	; 0x362 <__vector_9+0xa4>
            minutes++;
 34c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
            if (minutes == 60) minutes=0;
 356:	8c 33       	cpi	r24, 0x3C	; 60
 358:	11 f4       	brne	.+4      	; 0x35e <__vector_9+0xa0>
 35a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            seconds = 0;
 35e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <seconds.1951>
        }    
        
        // Convert decimal value to string
        itoa(tens, lcd_string_tens, 10);     
 362:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tens.1949>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 366:	4a e0       	ldi	r20, 0x0A	; 10
 368:	be 01       	movw	r22, r28
 36a:	6f 5f       	subi	r22, 0xFF	; 255
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 2f 02 	call	0x45e	; 0x45e <__itoa_ncheck>
        itoa(seconds, lcd_string_secs, 10);
 374:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seconds.1951>
 378:	4a e0       	ldi	r20, 0x0A	; 10
 37a:	be 01       	movw	r22, r28
 37c:	6d 5f       	subi	r22, 0xFD	; 253
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 2f 02 	call	0x45e	; 0x45e <__itoa_ncheck>
        itoa(minutes, lcd_string_mins, 10);            
 386:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 38a:	4a e0       	ldi	r20, 0x0A	; 10
 38c:	be 01       	movw	r22, r28
 38e:	6a 5f       	subi	r22, 0xFA	; 250
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 2f 02 	call	0x45e	; 0x45e <__itoa_ncheck>
        
        // Show decimal dot and tens                
        lcd_gotoxy(6, 0);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
        lcd_puts(".");
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
        lcd_gotoxy(7, 0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	87 e0       	ldi	r24, 0x07	; 7
 3ac:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
        lcd_puts(lcd_string_tens);
 3b0:	ce 01       	movw	r24, r28
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
            

        if (seconds < 10){
 3b8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seconds.1951>
 3bc:	8a 30       	cpi	r24, 0x0A	; 10
 3be:	88 f4       	brcc	.+34     	; 0x3e2 <__vector_9+0x124>
            lcd_gotoxy(4, 0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	84 e0       	ldi	r24, 0x04	; 4
 3c4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
            lcd_puts("0");
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
            lcd_gotoxy(5, 0);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	85 e0       	ldi	r24, 0x05	; 5
 3d4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
            lcd_puts(lcd_string_secs);
 3d8:	ce 01       	movw	r24, r28
 3da:	03 96       	adiw	r24, 0x03	; 3
 3dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <__vector_9+0x134>
        }
        else{

            lcd_gotoxy(4, 0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
            lcd_puts(lcd_string_secs);                
 3ea:	ce 01       	movw	r24, r28
 3ec:	03 96       	adiw	r24, 0x03	; 3
 3ee:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
        }
        if (minutes < 10) {
 3f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 3f6:	8a 30       	cpi	r24, 0x0A	; 10
 3f8:	88 f4       	brcc	.+34     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
            lcd_gotoxy(1, 0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
            lcd_puts("0");
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
            lcd_gotoxy(2, 0);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
            lcd_puts(lcd_string_mins);
 412:	ce 01       	movw	r24, r28
 414:	06 96       	adiw	r24, 0x06	; 6
 416:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 41a:	08 c0       	rjmp	.+16     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
        }
        else {
            lcd_gotoxy(1, 0);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
            lcd_puts(lcd_string_mins);
 424:	ce 01       	movw	r24, r28
 426:	06 96       	adiw	r24, 0x06	; 6
 428:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
        }
        // Else do nothing and exit the ISR
   
    }     
           
 42c:	28 96       	adiw	r28, 0x08	; 8
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__itoa_ncheck>:
 45e:	bb 27       	eor	r27, r27
 460:	4a 30       	cpi	r20, 0x0A	; 10
 462:	31 f4       	brne	.+12     	; 0x470 <__itoa_ncheck+0x12>
 464:	99 23       	and	r25, r25
 466:	22 f4       	brpl	.+8      	; 0x470 <__itoa_ncheck+0x12>
 468:	bd e2       	ldi	r27, 0x2D	; 45
 46a:	90 95       	com	r25
 46c:	81 95       	neg	r24
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	0c 94 3b 02 	jmp	0x476	; 0x476 <__utoa_common>

00000474 <__utoa_ncheck>:
 474:	bb 27       	eor	r27, r27

00000476 <__utoa_common>:
 476:	fb 01       	movw	r30, r22
 478:	55 27       	eor	r21, r21
 47a:	aa 27       	eor	r26, r26
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	aa 1f       	adc	r26, r26
 482:	a4 17       	cp	r26, r20
 484:	10 f0       	brcs	.+4      	; 0x48a <__utoa_common+0x14>
 486:	a4 1b       	sub	r26, r20
 488:	83 95       	inc	r24
 48a:	50 51       	subi	r21, 0x10	; 16
 48c:	b9 f7       	brne	.-18     	; 0x47c <__utoa_common+0x6>
 48e:	a0 5d       	subi	r26, 0xD0	; 208
 490:	aa 33       	cpi	r26, 0x3A	; 58
 492:	08 f0       	brcs	.+2      	; 0x496 <__utoa_common+0x20>
 494:	a9 5d       	subi	r26, 0xD9	; 217
 496:	a1 93       	st	Z+, r26
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	79 f7       	brne	.-34     	; 0x47a <__utoa_common+0x4>
 49c:	b1 11       	cpse	r27, r1
 49e:	b1 93       	st	Z+, r27
 4a0:	11 92       	st	Z+, r1
 4a2:	cb 01       	movw	r24, r22
 4a4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <strrev>

000004a8 <strrev>:
 4a8:	dc 01       	movw	r26, r24
 4aa:	fc 01       	movw	r30, r24
 4ac:	67 2f       	mov	r22, r23
 4ae:	71 91       	ld	r23, Z+
 4b0:	77 23       	and	r23, r23
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <strrev+0x4>
 4b4:	32 97       	sbiw	r30, 0x02	; 2
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <strrev+0x18>
 4b8:	7c 91       	ld	r23, X
 4ba:	6d 93       	st	X+, r22
 4bc:	70 83       	st	Z, r23
 4be:	62 91       	ld	r22, -Z
 4c0:	ae 17       	cp	r26, r30
 4c2:	bf 07       	cpc	r27, r31
 4c4:	c8 f3       	brcs	.-14     	; 0x4b8 <strrev+0x10>
 4c6:	08 95       	ret

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
