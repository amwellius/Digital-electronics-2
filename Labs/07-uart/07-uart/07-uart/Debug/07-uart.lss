
07-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000758  000007ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000758  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080013e  0080013e  0000082a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018a6  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aae  00000000  00000000  0000224a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aea  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  000037e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059b  00000000  00000000  00003aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c07  00000000  00000000  0000403b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004c42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_18>
  4c:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 38       	cpi	r26, 0x83	; 131
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 aa 03 	jmp	0x754	; 0x754 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
 1a2:	61 11       	cpse	r22, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_gotoxy+0xc>
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1ac:	08 95       	ret
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret

000001b6 <lcd_clrscr>:
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_putc>:
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_puts+0xe>
 1ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
 1d2:	fe 01       	movw	r30, r28
 1d4:	ef 01       	movw	r28, r30
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <lcd_puts+0x8>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x32>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x38>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	80 62       	ori	r24, 0x20	; 32
 222:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	80 61       	ori	r24, 0x10	; 16
 228:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x54>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x5e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init+0x64>
 248:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x6e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x74>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7e       	andi	r24, 0xEF	; 239
 25e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x84>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x8a>
 26e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <main>:


int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2ce:	8e e0       	ldi	r24, 0x0E	; 14
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	88 e0       	ldi	r24, 0x08	; 8
 2da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2de:	80 e1       	ldi	r24, 0x10	; 16
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX = ADMUX | (1<<REFS0);
 2e6:	ec e7       	ldi	r30, 0x7C	; 124
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	80 83       	st	Z, r24
    ADMUX = ADMUX &~ (1<<REFS1);        //0
 2f0:	80 81       	ld	r24, Z
 2f2:	8f 77       	andi	r24, 0x7F	; 127
 2f4:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX = ADMUX &~ (1<<MUX3);
 2f6:	80 81       	ld	r24, Z
 2f8:	87 7f       	andi	r24, 0xF7	; 247
 2fa:	80 83       	st	Z, r24
    ADMUX = ADMUX &~ (1<<MUX2);
 2fc:	80 81       	ld	r24, Z
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	80 83       	st	Z, r24
    ADMUX = ADMUX &~ (1<<MUX1);
 302:	80 81       	ld	r24, Z
 304:	8d 7f       	andi	r24, 0xFD	; 253
 306:	80 83       	st	Z, r24
    ADMUX = ADMUX &~ (1<<MUX0);
 308:	80 81       	ld	r24, Z
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	80 83       	st	Z, r24
    
    // Enable ADC module
    ADCSRA = ADCSRA | (1<<ADEN);
 30e:	ea e7       	ldi	r30, 0x7A	; 122
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	80 68       	ori	r24, 0x80	; 128
 316:	80 83       	st	Z, r24
    
    // Enable conversion complete interrupt
    ADCSRA = ADCSRA | (1<<ADIE);
 318:	80 81       	ld	r24, Z
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	80 83       	st	Z, r24

    // Set clock prescaler to 128
    ADCSRA = ADCSRA | (1<<ADPS2);
 31e:	80 81       	ld	r24, Z
 320:	84 60       	ori	r24, 0x04	; 4
 322:	80 83       	st	Z, r24
    ADCSRA = ADCSRA | (1<<ADPS1);
 324:	80 81       	ld	r24, Z
 326:	82 60       	ori	r24, 0x02	; 2
 328:	80 83       	st	Z, r24
    ADCSRA = ADCSRA | (1<<ADPS0);
 32a:	80 81       	ld	r24, Z
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	80 83       	st	Z, r24
    

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt
    TIM1_overflow_262ms();
 330:	e1 e8       	ldi	r30, 0x81	; 129
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	8b 7f       	andi	r24, 0xFB	; 251
 338:	80 83       	st	Z, r24
 33a:	80 81       	ld	r24, Z
 33c:	83 60       	ori	r24, 0x03	; 3
 33e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();   
 340:	ef e6       	ldi	r30, 0x6F	; 111
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	81 60       	ori	r24, 0x01	; 1
 348:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 34a:	87 e6       	ldi	r24, 0x67	; 103
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 38 03 	call	0x670	; 0x670 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 352:	78 94       	sei
 354:	ff cf       	rjmp	.-2      	; 0x354 <main+0xc4>

00000356 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	8f 93       	push	r24
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
    static uint8_t number_of_overflows = 0;
    number_of_overflows++;
    if (number_of_overflows >= 1)
    {
        */
        ADCSRA = ADCSRA | (1<<ADSC);
 366:	ea e7       	ldi	r30, 0x7A	; 122
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	80 64       	ori	r24, 0x40	; 64
 36e:	80 83       	st	Z, r24
   // }    

}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <__vector_21+0x2c>
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <__vector_21+0x2e>
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
    uint16_t value = 0;
    char lcd_string[4] = "0000";
 3b2:	80 e3       	ldi	r24, 0x30	; 48
 3b4:	90 e3       	ldi	r25, 0x30	; 48
 3b6:	9a 83       	std	Y+2, r25	; 0x02
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	9c 83       	std	Y+4, r25	; 0x04
 3bc:	8b 83       	std	Y+3, r24	; 0x03
    
    //ADC je 16 bitova hodnota ktoru on precita naraz
    value = ADC;                  // Copy ADC result to 16-bit variable
 3be:	08 e7       	ldi	r16, 0x78	; 120
 3c0:	10 e0       	ldi	r17, 0x00	; 0
 3c2:	f8 01       	movw	r30, r16
 3c4:	80 81       	ld	r24, Z
 3c6:	91 81       	ldd	r25, Z+1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3c8:	4a e0       	ldi	r20, 0x0A	; 10
 3ca:	be 01       	movw	r22, r28
 3cc:	6f 5f       	subi	r22, 0xFF	; 255
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	0e 94 75 03 	call	0x6ea	; 0x6ea <__itoa_ncheck>
    itoa(value, lcd_string, 10);  // Convert decimal value to string
    

    
    // A value displaying
    lcd_gotoxy(8,0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	88 e0       	ldi	r24, 0x08	; 8
 3d8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    lcd_puts("    ");
 3dc:	89 e1       	ldi	r24, 0x19	; 25
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(8,0);     
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	88 e0       	ldi	r24, 0x08	; 8
 3e8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    lcd_puts(lcd_string);
 3ec:	ce 01       	movw	r24, r28
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    //uart communication
    uart_puts(lcd_string);
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
    uart_puts("\r\n");
 3fc:	82 e1       	ldi	r24, 0x12	; 18
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
    
    
    // B value
    value = ADC;                  // Copy ADC result to 16-bit variable
 404:	f8 01       	movw	r30, r16
 406:	80 81       	ld	r24, Z
 408:	91 81       	ldd	r25, Z+1	; 0x01
 40a:	40 e1       	ldi	r20, 0x10	; 16
 40c:	be 01       	movw	r22, r28
 40e:	6f 5f       	subi	r22, 0xFF	; 255
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	0e 94 75 03 	call	0x6ea	; 0x6ea <__itoa_ncheck>
    itoa(value, lcd_string, 16);
    
    lcd_gotoxy(13,0);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	8d e0       	ldi	r24, 0x0D	; 13
 41a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    //display clearing
    lcd_puts("   ");
 41e:	8a e1       	ldi	r24, 0x1A	; 26
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(13,0);    
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	8d e0       	ldi	r24, 0x0D	; 13
 42a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    lcd_puts(lcd_string);
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    //uart communication
    uart_puts(lcd_string);
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
    uart_puts("\r\n");
 43e:	82 e1       	ldi	r24, 0x12	; 18
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
        
    // C value
    value = ADC;                  // Copy ADC result to 16-bit variable
 446:	f8 01       	movw	r30, r16
 448:	00 81       	ld	r16, Z
 44a:	11 81       	ldd	r17, Z+1	; 0x01
 44c:	42 e0       	ldi	r20, 0x02	; 2
 44e:	be 01       	movw	r22, r28
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	c8 01       	movw	r24, r16
 456:	0e 94 75 03 	call	0x6ea	; 0x6ea <__itoa_ncheck>
    itoa(value, lcd_string, 2);
    lcd_gotoxy(8,1);
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	88 e0       	ldi	r24, 0x08	; 8
 45e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    lcd_puts("        ");
 462:	85 e1       	ldi	r24, 0x15	; 21
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    //uart communication
    uart_puts(lcd_string);
 46a:	ce 01       	movw	r24, r28
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
    uart_puts("\r\n");
 472:	82 e1       	ldi	r24, 0x12	; 18
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
    
    switch(value){
 47a:	01 39       	cpi	r16, 0x91	; 145
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	1f 07       	cpc	r17, r31
 480:	38 f4       	brcc	.+14     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 482:	09 3c       	cpi	r16, 0xC9	; 201
 484:	11 05       	cpc	r17, r1
 486:	98 f5       	brcc	.+102    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 488:	0b 35       	cpi	r16, 0x5B	; 91
 48a:	11 05       	cpc	r17, r1
 48c:	f8 f4       	brcc	.+62     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 490:	09 3e       	cpi	r16, 0xE9	; 233
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	18 07       	cpc	r17, r24
 496:	20 f4       	brcc	.+8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 498:	09 35       	cpi	r16, 0x59	; 89
 49a:	12 40       	sbci	r17, 0x02	; 2
 49c:	c8 f1       	brcs	.+114    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 49e:	49 c0       	rjmp	.+146    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 4a0:	0b 31       	cpi	r16, 0x1B	; 27
 4a2:	14 40       	sbci	r17, 0x04	; 4
 4a4:	08 f4       	brcc	.+2      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a6:	56 c0       	rjmp	.+172    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 4a8:	66 c0       	rjmp	.+204    	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
        case 0 ... 90       : lcd_gotoxy(8,1); lcd_puts("right"); uart_puts("right"); uart_puts("\r\n");  break;        //0
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 4b2:	8e e1       	ldi	r24, 0x1E	; 30
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 4ba:	8e e1       	ldi	r24, 0x1E	; 30
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 4c2:	82 e1       	ldi	r24, 0x12	; 18
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 4ca:	59 c0       	rjmp	.+178    	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
        case 91 ... 200     : lcd_gotoxy(8,1); lcd_puts("up"); uart_puts("up"); uart_puts("\r\n");  break;           //99
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	88 e0       	ldi	r24, 0x08	; 8
 4d0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 4d4:	84 e2       	ldi	r24, 0x24	; 36
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 4dc:	84 e2       	ldi	r24, 0x24	; 36
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 4e4:	82 e1       	ldi	r24, 0x12	; 18
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 4ec:	48 c0       	rjmp	.+144    	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
        case 201 ... 400    : lcd_gotoxy(8,1); lcd_puts("down"); uart_puts("down"); uart_puts("\r\n");  break;         //255
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	88 e0       	ldi	r24, 0x08	; 8
 4f2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 4f6:	87 e2       	ldi	r24, 0x27	; 39
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 4fe:	87 e2       	ldi	r24, 0x27	; 39
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 506:	82 e1       	ldi	r24, 0x12	; 18
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 50e:	37 c0       	rjmp	.+110    	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
        case 401 ... 600    : lcd_gotoxy(8,1); lcd_puts("left"); uart_puts("left"); uart_puts("\r\n");  break;         //408
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	88 e0       	ldi	r24, 0x08	; 8
 514:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 518:	8c e2       	ldi	r24, 0x2C	; 44
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 520:	8c e2       	ldi	r24, 0x2C	; 44
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 528:	82 e1       	ldi	r24, 0x12	; 18
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 530:	26 c0       	rjmp	.+76     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
        case 601 ... 1000   : lcd_gotoxy(8,1); lcd_puts("select"); uart_puts("select"); uart_puts("\r\n");  break;       //638
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	88 e0       	ldi	r24, 0x08	; 8
 536:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 53a:	81 e3       	ldi	r24, 0x31	; 49
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 542:	81 e3       	ldi	r24, 0x31	; 49
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 54a:	82 e1       	ldi	r24, 0x12	; 18
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 552:	15 c0       	rjmp	.+42     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
        case 1001 ... 1050  : lcd_gotoxy(8,1); lcd_puts("none"); uart_puts("none"); uart_puts("\r\n");  break;         //1023
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 55c:	88 e3       	ldi	r24, 0x38	; 56
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 564:	88 e3       	ldi	r24, 0x38	; 56
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 56c:	82 e1       	ldi	r24, 0x12	; 18
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 574:	04 c0       	rjmp	.+8      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
        default:lcd_puts("       ");
 576:	86 e1       	ldi	r24, 0x16	; 22
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    }
    //uart communication
    uart_puts("right"); uart_puts("\r\n");        
 57e:	8e e1       	ldi	r24, 0x1E	; 30
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
 586:	82 e1       	ldi	r24, 0x12	; 18
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_puts>
}
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
 59e:	bf 91       	pop	r27
 5a0:	af 91       	pop	r26
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	7f 91       	pop	r23
 5a8:	6f 91       	pop	r22
 5aa:	5f 91       	pop	r21
 5ac:	4f 91       	pop	r20
 5ae:	3f 91       	pop	r19
 5b0:	2f 91       	pop	r18
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	0f 90       	pop	r0
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	2f 93       	push	r18
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
 5d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5d8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5dc:	8c 71       	andi	r24, 0x1C	; 28
 5de:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <UART_RxHead>
 5e2:	ef 5f       	subi	r30, 0xFF	; 255
 5e4:	ef 71       	andi	r30, 0x1F	; 31
 5e6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <UART_RxTail>
 5ea:	e9 17       	cp	r30, r25
 5ec:	39 f0       	breq	.+14     	; 0x5fc <__vector_18+0x3c>
 5ee:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <UART_RxHead>
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	ed 5b       	subi	r30, 0xBD	; 189
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	20 83       	st	Z, r18
 5fa:	01 c0       	rjmp	.+2      	; 0x5fe <__vector_18+0x3e>
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <__data_end>
 602:	89 2b       	or	r24, r25
 604:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <__vector_19>:
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
 62e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <UART_TxHead>
 632:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <UART_TxTail>
 636:	98 17       	cp	r25, r24
 638:	69 f0       	breq	.+26     	; 0x654 <__vector_19+0x38>
 63a:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <UART_TxTail>
 63e:	ef 5f       	subi	r30, 0xFF	; 255
 640:	ef 71       	andi	r30, 0x1F	; 31
 642:	e0 93 41 01 	sts	0x0141, r30	; 0x800141 <UART_TxTail>
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	ed 59       	subi	r30, 0x9D	; 157
 64a:	fe 4f       	sbci	r31, 0xFE	; 254
 64c:	80 81       	ld	r24, Z
 64e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 652:	05 c0       	rjmp	.+10     	; 0x65e <__vector_19+0x42>
 654:	e1 ec       	ldi	r30, 0xC1	; 193
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	8f 7d       	andi	r24, 0xDF	; 223
 65c:	80 83       	st	Z, r24
 65e:	ff 91       	pop	r31
 660:	ef 91       	pop	r30
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	0f 90       	pop	r0
 668:	0f be       	out	0x3f, r0	; 63
 66a:	0f 90       	pop	r0
 66c:	1f 90       	pop	r1
 66e:	18 95       	reti

00000670 <uart_init>:
 670:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UART_TxHead>
 674:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <UART_TxTail>
 678:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <UART_RxHead>
 67c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <UART_RxTail>
 680:	28 2f       	mov	r18, r24
 682:	39 2f       	mov	r19, r25
 684:	33 23       	and	r19, r19
 686:	1c f4       	brge	.+6      	; 0x68e <uart_init+0x1e>
 688:	22 e0       	ldi	r18, 0x02	; 2
 68a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 68e:	90 78       	andi	r25, 0x80	; 128
 690:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 694:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 698:	88 e9       	ldi	r24, 0x98	; 152
 69a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 69e:	86 e0       	ldi	r24, 0x06	; 6
 6a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6a4:	08 95       	ret

000006a6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 6a6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <UART_TxHead>
 6aa:	2f 5f       	subi	r18, 0xFF	; 255
 6ac:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 6ae:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <UART_TxTail>
 6b2:	29 17       	cp	r18, r25
 6b4:	e1 f3       	breq	.-8      	; 0x6ae <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 6b6:	e2 2f       	mov	r30, r18
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	ed 59       	subi	r30, 0x9D	; 157
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 6c0:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 6c4:	e1 ec       	ldi	r30, 0xC1	; 193
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	80 62       	ori	r24, 0x20	; 32
 6cc:	80 83       	st	Z, r24
 6ce:	08 95       	ret

000006d0 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	ec 01       	movw	r28, r24
    while (*s)
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <uart_puts+0xe>
        uart_putc(*s++);
 6d8:	21 96       	adiw	r28, 0x01	; 1
 6da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 6de:	88 81       	ld	r24, Y
 6e0:	81 11       	cpse	r24, r1
 6e2:	fa cf       	rjmp	.-12     	; 0x6d8 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <__itoa_ncheck>:
 6ea:	bb 27       	eor	r27, r27
 6ec:	4a 30       	cpi	r20, 0x0A	; 10
 6ee:	31 f4       	brne	.+12     	; 0x6fc <__itoa_ncheck+0x12>
 6f0:	99 23       	and	r25, r25
 6f2:	22 f4       	brpl	.+8      	; 0x6fc <__itoa_ncheck+0x12>
 6f4:	bd e2       	ldi	r27, 0x2D	; 45
 6f6:	90 95       	com	r25
 6f8:	81 95       	neg	r24
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	0c 94 81 03 	jmp	0x702	; 0x702 <__utoa_common>

00000700 <__utoa_ncheck>:
 700:	bb 27       	eor	r27, r27

00000702 <__utoa_common>:
 702:	fb 01       	movw	r30, r22
 704:	55 27       	eor	r21, r21
 706:	aa 27       	eor	r26, r26
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	aa 1f       	adc	r26, r26
 70e:	a4 17       	cp	r26, r20
 710:	10 f0       	brcs	.+4      	; 0x716 <__utoa_common+0x14>
 712:	a4 1b       	sub	r26, r20
 714:	83 95       	inc	r24
 716:	50 51       	subi	r21, 0x10	; 16
 718:	b9 f7       	brne	.-18     	; 0x708 <__utoa_common+0x6>
 71a:	a0 5d       	subi	r26, 0xD0	; 208
 71c:	aa 33       	cpi	r26, 0x3A	; 58
 71e:	08 f0       	brcs	.+2      	; 0x722 <__utoa_common+0x20>
 720:	a9 5d       	subi	r26, 0xD9	; 217
 722:	a1 93       	st	Z+, r26
 724:	00 97       	sbiw	r24, 0x00	; 0
 726:	79 f7       	brne	.-34     	; 0x706 <__utoa_common+0x4>
 728:	b1 11       	cpse	r27, r1
 72a:	b1 93       	st	Z+, r27
 72c:	11 92       	st	Z+, r1
 72e:	cb 01       	movw	r24, r22
 730:	0c 94 9a 03 	jmp	0x734	; 0x734 <strrev>

00000734 <strrev>:
 734:	dc 01       	movw	r26, r24
 736:	fc 01       	movw	r30, r24
 738:	67 2f       	mov	r22, r23
 73a:	71 91       	ld	r23, Z+
 73c:	77 23       	and	r23, r23
 73e:	e1 f7       	brne	.-8      	; 0x738 <strrev+0x4>
 740:	32 97       	sbiw	r30, 0x02	; 2
 742:	04 c0       	rjmp	.+8      	; 0x74c <strrev+0x18>
 744:	7c 91       	ld	r23, X
 746:	6d 93       	st	X+, r22
 748:	70 83       	st	Z, r23
 74a:	62 91       	ld	r22, -Z
 74c:	ae 17       	cp	r26, r30
 74e:	bf 07       	cpc	r27, r31
 750:	c8 f3       	brcs	.-14     	; 0x744 <strrev+0x10>
 752:	08 95       	ret

00000754 <_exit>:
 754:	f8 94       	cli

00000756 <__stop_program>:
 756:	ff cf       	rjmp	.-2      	; 0x756 <__stop_program>
